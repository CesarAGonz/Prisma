// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  billboard: (where?: BillboardWhereInput) => Promise<boolean>;
  combo: (where?: ComboWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  employee: (where?: EmployeeWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  membership: (where?: MembershipWhereInput) => Promise<boolean>;
  movie: (where?: MovieWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  seat: (where?: SeatWhereInput) => Promise<boolean>;
  show: (where?: ShowWhereInput) => Promise<boolean>;
  ticket: (where?: TicketWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  billboard: (where: BillboardWhereUniqueInput) => BillboardNullablePromise;
  billboards: (args?: {
    where?: BillboardWhereInput;
    orderBy?: BillboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Billboard>;
  billboardsConnection: (args?: {
    where?: BillboardWhereInput;
    orderBy?: BillboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BillboardConnectionPromise;
  combo: (where: ComboWhereUniqueInput) => ComboNullablePromise;
  comboes: (args?: {
    where?: ComboWhereInput;
    orderBy?: ComboOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Combo>;
  comboesConnection: (args?: {
    where?: ComboWhereInput;
    orderBy?: ComboOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ComboConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  employee: (where: EmployeeWhereUniqueInput) => EmployeeNullablePromise;
  employees: (args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Employee>;
  employeesConnection: (args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmployeeConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  membership: (where: MembershipWhereUniqueInput) => MembershipNullablePromise;
  memberships: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Membership>;
  membershipsConnection: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MembershipConnectionPromise;
  movie: (where: MovieWhereUniqueInput) => MovieNullablePromise;
  movies: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Movie>;
  moviesConnection: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MovieConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  seat: (where: SeatWhereUniqueInput) => SeatNullablePromise;
  seats: (args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Seat>;
  seatsConnection: (args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SeatConnectionPromise;
  show: (where: ShowWhereUniqueInput) => ShowNullablePromise;
  shows: (args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Show>;
  showsConnection: (args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShowConnectionPromise;
  ticket: (where: TicketWhereUniqueInput) => TicketNullablePromise;
  tickets: (args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ticket>;
  ticketsConnection: (args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TicketConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBillboard: (data: BillboardCreateInput) => BillboardPromise;
  updateBillboard: (args: {
    data: BillboardUpdateInput;
    where: BillboardWhereUniqueInput;
  }) => BillboardPromise;
  updateManyBillboards: (args: {
    data: BillboardUpdateManyMutationInput;
    where?: BillboardWhereInput;
  }) => BatchPayloadPromise;
  upsertBillboard: (args: {
    where: BillboardWhereUniqueInput;
    create: BillboardCreateInput;
    update: BillboardUpdateInput;
  }) => BillboardPromise;
  deleteBillboard: (where: BillboardWhereUniqueInput) => BillboardPromise;
  deleteManyBillboards: (where?: BillboardWhereInput) => BatchPayloadPromise;
  createCombo: (data: ComboCreateInput) => ComboPromise;
  updateCombo: (args: {
    data: ComboUpdateInput;
    where: ComboWhereUniqueInput;
  }) => ComboPromise;
  updateManyComboes: (args: {
    data: ComboUpdateManyMutationInput;
    where?: ComboWhereInput;
  }) => BatchPayloadPromise;
  upsertCombo: (args: {
    where: ComboWhereUniqueInput;
    create: ComboCreateInput;
    update: ComboUpdateInput;
  }) => ComboPromise;
  deleteCombo: (where: ComboWhereUniqueInput) => ComboPromise;
  deleteManyComboes: (where?: ComboWhereInput) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createEmployee: (data: EmployeeCreateInput) => EmployeePromise;
  updateEmployee: (args: {
    data: EmployeeUpdateInput;
    where: EmployeeWhereUniqueInput;
  }) => EmployeePromise;
  updateManyEmployees: (args: {
    data: EmployeeUpdateManyMutationInput;
    where?: EmployeeWhereInput;
  }) => BatchPayloadPromise;
  upsertEmployee: (args: {
    where: EmployeeWhereUniqueInput;
    create: EmployeeCreateInput;
    update: EmployeeUpdateInput;
  }) => EmployeePromise;
  deleteEmployee: (where: EmployeeWhereUniqueInput) => EmployeePromise;
  deleteManyEmployees: (where?: EmployeeWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createMembership: (data: MembershipCreateInput) => MembershipPromise;
  updateMembership: (args: {
    data: MembershipUpdateInput;
    where: MembershipWhereUniqueInput;
  }) => MembershipPromise;
  updateManyMemberships: (args: {
    data: MembershipUpdateManyMutationInput;
    where?: MembershipWhereInput;
  }) => BatchPayloadPromise;
  upsertMembership: (args: {
    where: MembershipWhereUniqueInput;
    create: MembershipCreateInput;
    update: MembershipUpdateInput;
  }) => MembershipPromise;
  deleteMembership: (where: MembershipWhereUniqueInput) => MembershipPromise;
  deleteManyMemberships: (where?: MembershipWhereInput) => BatchPayloadPromise;
  createMovie: (data: MovieCreateInput) => MoviePromise;
  updateMovie: (args: {
    data: MovieUpdateInput;
    where: MovieWhereUniqueInput;
  }) => MoviePromise;
  updateManyMovies: (args: {
    data: MovieUpdateManyMutationInput;
    where?: MovieWhereInput;
  }) => BatchPayloadPromise;
  upsertMovie: (args: {
    where: MovieWhereUniqueInput;
    create: MovieCreateInput;
    update: MovieUpdateInput;
  }) => MoviePromise;
  deleteMovie: (where: MovieWhereUniqueInput) => MoviePromise;
  deleteManyMovies: (where?: MovieWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  updateManyRooms: (args: {
    data: RoomUpdateManyMutationInput;
    where?: RoomWhereInput;
  }) => BatchPayloadPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createSeat: (data: SeatCreateInput) => SeatPromise;
  updateSeat: (args: {
    data: SeatUpdateInput;
    where: SeatWhereUniqueInput;
  }) => SeatPromise;
  updateManySeats: (args: {
    data: SeatUpdateManyMutationInput;
    where?: SeatWhereInput;
  }) => BatchPayloadPromise;
  upsertSeat: (args: {
    where: SeatWhereUniqueInput;
    create: SeatCreateInput;
    update: SeatUpdateInput;
  }) => SeatPromise;
  deleteSeat: (where: SeatWhereUniqueInput) => SeatPromise;
  deleteManySeats: (where?: SeatWhereInput) => BatchPayloadPromise;
  createShow: (data: ShowCreateInput) => ShowPromise;
  updateShow: (args: {
    data: ShowUpdateInput;
    where: ShowWhereUniqueInput;
  }) => ShowPromise;
  updateManyShows: (args: {
    data: ShowUpdateManyMutationInput;
    where?: ShowWhereInput;
  }) => BatchPayloadPromise;
  upsertShow: (args: {
    where: ShowWhereUniqueInput;
    create: ShowCreateInput;
    update: ShowUpdateInput;
  }) => ShowPromise;
  deleteShow: (where: ShowWhereUniqueInput) => ShowPromise;
  deleteManyShows: (where?: ShowWhereInput) => BatchPayloadPromise;
  createTicket: (data: TicketCreateInput) => TicketPromise;
  updateTicket: (args: {
    data: TicketUpdateInput;
    where: TicketWhereUniqueInput;
  }) => TicketPromise;
  updateManyTickets: (args: {
    data: TicketUpdateManyMutationInput;
    where?: TicketWhereInput;
  }) => BatchPayloadPromise;
  upsertTicket: (args: {
    where: TicketWhereUniqueInput;
    create: TicketCreateInput;
    update: TicketUpdateInput;
  }) => TicketPromise;
  deleteTicket: (where: TicketWhereUniqueInput) => TicketPromise;
  deleteManyTickets: (where?: TicketWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  billboard: (
    where?: BillboardSubscriptionWhereInput
  ) => BillboardSubscriptionPayloadSubscription;
  combo: (
    where?: ComboSubscriptionWhereInput
  ) => ComboSubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  employee: (
    where?: EmployeeSubscriptionWhereInput
  ) => EmployeeSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  membership: (
    where?: MembershipSubscriptionWhereInput
  ) => MembershipSubscriptionPayloadSubscription;
  movie: (
    where?: MovieSubscriptionWhereInput
  ) => MovieSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  seat: (
    where?: SeatSubscriptionWhereInput
  ) => SeatSubscriptionPayloadSubscription;
  show: (
    where?: ShowSubscriptionWhereInput
  ) => ShowSubscriptionPayloadSubscription;
  ticket: (
    where?: TicketSubscriptionWhereInput
  ) => TicketSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TypeRoom =
  | "VIP"
  | "CUATROD"
  | "TRESD"
  | "MACRO"
  | "IMAX"
  | "CLASICA";

export type TypeSeatStatus = "AVAILABLE" | "TAKEN" | "OUT_OF_SERVICE";

export type ShowOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "schedule_ASC"
  | "schedule_DESC";

export type SeatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "column_ASC"
  | "column_DESC"
  | "line_ASC"
  | "line_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC";

export type BillboardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "startAt_ASC"
  | "startAt_DESC"
  | "endAt_ASC"
  | "endAt_DESC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "sku_ASC"
  | "sku_DESC"
  | "cost_ASC"
  | "cost_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "valuePoints_ASC"
  | "valuePoints_DESC";

export type ComboOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type TypeMembership = "FAN" | "SUPERFAN" | "DIOS";

export type TypeUser = "ADMIN" | "EMPLOYEE" | "CUSTOMER";

export type TypeRol =
  | "CASHIER"
  | "MANAGER"
  | "CLEANER"
  | "PROJECTION"
  | "GROSERY";

export type TypePayment = "CASH" | "CARD" | "POINTS";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "price_ASC"
  | "price_DESC"
  | "discount_ASC"
  | "discount_DESC"
  | "PaymentMethod_ASC"
  | "PaymentMethod_DESC";

export type TicketOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "cost_ASC"
  | "cost_DESC"
  | "points_ASC"
  | "points_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "alias_ASC"
  | "alias_DESC";

export type EmployeeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "rol_ASC"
  | "rol_DESC";

export type MembershipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "genere_ASC"
  | "genere_DESC"
  | "points_ASC"
  | "points_DESC"
  | "type_ASC"
  | "type_DESC";

export type MovieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "sinopsis_ASC"
  | "sinopsis_DESC"
  | "genere_ASC"
  | "genere_DESC"
  | "clasification_ASC"
  | "clasification_DESC"
  | "lenght_ASC"
  | "lenght_DESC"
  | "lenguage_ASC"
  | "lenguage_DESC"
  | "premiere_ASC"
  | "premiere_DESC";

export type RoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "available_ASC"
  | "available_DESC"
  | "type_ASC"
  | "type_DESC"
  | "number_ASC"
  | "number_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "password_ASC"
  | "password_DESC"
  | "rfc_ASC"
  | "rfc_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "points_ASC"
  | "points_DESC"
  | "type_ASC"
  | "type_DESC"
  | "token_ASC"
  | "token_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BillboardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ShowWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  movie?: Maybe<MovieWhereInput>;
  schedule?: Maybe<String>;
  schedule_not?: Maybe<String>;
  schedule_in?: Maybe<String[] | String>;
  schedule_not_in?: Maybe<String[] | String>;
  schedule_lt?: Maybe<String>;
  schedule_lte?: Maybe<String>;
  schedule_gt?: Maybe<String>;
  schedule_gte?: Maybe<String>;
  schedule_contains?: Maybe<String>;
  schedule_not_contains?: Maybe<String>;
  schedule_starts_with?: Maybe<String>;
  schedule_not_starts_with?: Maybe<String>;
  schedule_ends_with?: Maybe<String>;
  schedule_not_ends_with?: Maybe<String>;
  room?: Maybe<RoomWhereInput>;
  AND?: Maybe<ShowWhereInput[] | ShowWhereInput>;
}

export interface MovieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  sinopsis?: Maybe<String>;
  sinopsis_not?: Maybe<String>;
  sinopsis_in?: Maybe<String[] | String>;
  sinopsis_not_in?: Maybe<String[] | String>;
  sinopsis_lt?: Maybe<String>;
  sinopsis_lte?: Maybe<String>;
  sinopsis_gt?: Maybe<String>;
  sinopsis_gte?: Maybe<String>;
  sinopsis_contains?: Maybe<String>;
  sinopsis_not_contains?: Maybe<String>;
  sinopsis_starts_with?: Maybe<String>;
  sinopsis_not_starts_with?: Maybe<String>;
  sinopsis_ends_with?: Maybe<String>;
  sinopsis_not_ends_with?: Maybe<String>;
  genere?: Maybe<String>;
  genere_not?: Maybe<String>;
  genere_in?: Maybe<String[] | String>;
  genere_not_in?: Maybe<String[] | String>;
  genere_lt?: Maybe<String>;
  genere_lte?: Maybe<String>;
  genere_gt?: Maybe<String>;
  genere_gte?: Maybe<String>;
  genere_contains?: Maybe<String>;
  genere_not_contains?: Maybe<String>;
  genere_starts_with?: Maybe<String>;
  genere_not_starts_with?: Maybe<String>;
  genere_ends_with?: Maybe<String>;
  genere_not_ends_with?: Maybe<String>;
  clasification?: Maybe<String>;
  clasification_not?: Maybe<String>;
  clasification_in?: Maybe<String[] | String>;
  clasification_not_in?: Maybe<String[] | String>;
  clasification_lt?: Maybe<String>;
  clasification_lte?: Maybe<String>;
  clasification_gt?: Maybe<String>;
  clasification_gte?: Maybe<String>;
  clasification_contains?: Maybe<String>;
  clasification_not_contains?: Maybe<String>;
  clasification_starts_with?: Maybe<String>;
  clasification_not_starts_with?: Maybe<String>;
  clasification_ends_with?: Maybe<String>;
  clasification_not_ends_with?: Maybe<String>;
  lenght?: Maybe<Int>;
  lenght_not?: Maybe<Int>;
  lenght_in?: Maybe<Int[] | Int>;
  lenght_not_in?: Maybe<Int[] | Int>;
  lenght_lt?: Maybe<Int>;
  lenght_lte?: Maybe<Int>;
  lenght_gt?: Maybe<Int>;
  lenght_gte?: Maybe<Int>;
  lenguage?: Maybe<String>;
  lenguage_not?: Maybe<String>;
  lenguage_in?: Maybe<String[] | String>;
  lenguage_not_in?: Maybe<String[] | String>;
  lenguage_lt?: Maybe<String>;
  lenguage_lte?: Maybe<String>;
  lenguage_gt?: Maybe<String>;
  lenguage_gte?: Maybe<String>;
  lenguage_contains?: Maybe<String>;
  lenguage_not_contains?: Maybe<String>;
  lenguage_starts_with?: Maybe<String>;
  lenguage_not_starts_with?: Maybe<String>;
  lenguage_ends_with?: Maybe<String>;
  lenguage_not_ends_with?: Maybe<String>;
  premiere?: Maybe<DateTimeInput>;
  premiere_not?: Maybe<DateTimeInput>;
  premiere_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  premiere_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  premiere_lt?: Maybe<DateTimeInput>;
  premiere_lte?: Maybe<DateTimeInput>;
  premiere_gt?: Maybe<DateTimeInput>;
  premiere_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MovieWhereInput[] | MovieWhereInput>;
}

export interface RoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  available?: Maybe<Boolean>;
  available_not?: Maybe<Boolean>;
  type?: Maybe<TypeRoom>;
  type_not?: Maybe<TypeRoom>;
  type_in?: Maybe<TypeRoom[] | TypeRoom>;
  type_not_in?: Maybe<TypeRoom[] | TypeRoom>;
  seats_some?: Maybe<SeatWhereInput>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface SeatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  column?: Maybe<Int>;
  column_not?: Maybe<Int>;
  column_in?: Maybe<Int[] | Int>;
  column_not_in?: Maybe<Int[] | Int>;
  column_lt?: Maybe<Int>;
  column_lte?: Maybe<Int>;
  column_gt?: Maybe<Int>;
  column_gte?: Maybe<Int>;
  line?: Maybe<Int>;
  line_not?: Maybe<Int>;
  line_in?: Maybe<Int[] | Int>;
  line_not_in?: Maybe<Int[] | Int>;
  line_lt?: Maybe<Int>;
  line_lte?: Maybe<Int>;
  line_gt?: Maybe<Int>;
  line_gte?: Maybe<Int>;
  status?: Maybe<TypeSeatStatus>;
  status_not?: Maybe<TypeSeatStatus>;
  status_in?: Maybe<TypeSeatStatus[] | TypeSeatStatus>;
  status_not_in?: Maybe<TypeSeatStatus[] | TypeSeatStatus>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<SeatWhereInput[] | SeatWhereInput>;
}

export interface BillboardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  startAt?: Maybe<DateTimeInput>;
  startAt_not?: Maybe<DateTimeInput>;
  startAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startAt_lt?: Maybe<DateTimeInput>;
  startAt_lte?: Maybe<DateTimeInput>;
  startAt_gt?: Maybe<DateTimeInput>;
  startAt_gte?: Maybe<DateTimeInput>;
  endAt?: Maybe<DateTimeInput>;
  endAt_not?: Maybe<DateTimeInput>;
  endAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endAt_lt?: Maybe<DateTimeInput>;
  endAt_lte?: Maybe<DateTimeInput>;
  endAt_gt?: Maybe<DateTimeInput>;
  endAt_gte?: Maybe<DateTimeInput>;
  shows_some?: Maybe<ShowWhereInput>;
  AND?: Maybe<BillboardWhereInput[] | BillboardWhereInput>;
}

export type ComboWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  sku?: Maybe<String>;
  sku_not?: Maybe<String>;
  sku_in?: Maybe<String[] | String>;
  sku_not_in?: Maybe<String[] | String>;
  sku_lt?: Maybe<String>;
  sku_lte?: Maybe<String>;
  sku_gt?: Maybe<String>;
  sku_gte?: Maybe<String>;
  sku_contains?: Maybe<String>;
  sku_not_contains?: Maybe<String>;
  sku_starts_with?: Maybe<String>;
  sku_not_starts_with?: Maybe<String>;
  sku_ends_with?: Maybe<String>;
  sku_not_ends_with?: Maybe<String>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  valuePoints?: Maybe<Int>;
  valuePoints_not?: Maybe<Int>;
  valuePoints_in?: Maybe<Int[] | Int>;
  valuePoints_not_in?: Maybe<Int[] | Int>;
  valuePoints_lt?: Maybe<Int>;
  valuePoints_lte?: Maybe<Int>;
  valuePoints_gt?: Maybe<Int>;
  valuePoints_gte?: Maybe<Int>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export interface ComboWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  items_some?: Maybe<ItemWhereInput>;
  AND?: Maybe<ComboWhereInput[] | ComboWhereInput>;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  customer?: Maybe<CustomerWhereInput>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  items_some?: Maybe<ItemWhereInput>;
  tickets_some?: Maybe<TicketWhereInput>;
  discount?: Maybe<Int>;
  discount_not?: Maybe<Int>;
  discount_in?: Maybe<Int[] | Int>;
  discount_not_in?: Maybe<Int[] | Int>;
  discount_lt?: Maybe<Int>;
  discount_lte?: Maybe<Int>;
  discount_gt?: Maybe<Int>;
  discount_gte?: Maybe<Int>;
  employee?: Maybe<EmployeeWhereInput>;
  PaymentMethod?: Maybe<TypePayment>;
  PaymentMethod_not?: Maybe<TypePayment>;
  PaymentMethod_in?: Maybe<TypePayment[] | TypePayment>;
  PaymentMethod_not_in?: Maybe<TypePayment[] | TypePayment>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface CustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  alias?: Maybe<String>;
  alias_not?: Maybe<String>;
  alias_in?: Maybe<String[] | String>;
  alias_not_in?: Maybe<String[] | String>;
  alias_lt?: Maybe<String>;
  alias_lte?: Maybe<String>;
  alias_gt?: Maybe<String>;
  alias_gte?: Maybe<String>;
  alias_contains?: Maybe<String>;
  alias_not_contains?: Maybe<String>;
  alias_starts_with?: Maybe<String>;
  alias_not_starts_with?: Maybe<String>;
  alias_ends_with?: Maybe<String>;
  alias_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<Int>;
  phone_not?: Maybe<Int>;
  phone_in?: Maybe<Int[] | Int>;
  phone_not_in?: Maybe<Int[] | Int>;
  phone_lt?: Maybe<Int>;
  phone_lte?: Maybe<Int>;
  phone_gt?: Maybe<Int>;
  phone_gte?: Maybe<Int>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  rfc?: Maybe<String>;
  rfc_not?: Maybe<String>;
  rfc_in?: Maybe<String[] | String>;
  rfc_not_in?: Maybe<String[] | String>;
  rfc_lt?: Maybe<String>;
  rfc_lte?: Maybe<String>;
  rfc_gt?: Maybe<String>;
  rfc_gte?: Maybe<String>;
  rfc_contains?: Maybe<String>;
  rfc_not_contains?: Maybe<String>;
  rfc_starts_with?: Maybe<String>;
  rfc_not_starts_with?: Maybe<String>;
  rfc_ends_with?: Maybe<String>;
  rfc_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  points?: Maybe<Int>;
  points_not?: Maybe<Int>;
  points_in?: Maybe<Int[] | Int>;
  points_not_in?: Maybe<Int[] | Int>;
  points_lt?: Maybe<Int>;
  points_lte?: Maybe<Int>;
  points_gt?: Maybe<Int>;
  points_gte?: Maybe<Int>;
  membership?: Maybe<MembershipWhereInput>;
  type?: Maybe<TypeUser>;
  type_not?: Maybe<TypeUser>;
  type_in?: Maybe<TypeUser[] | TypeUser>;
  type_not_in?: Maybe<TypeUser[] | TypeUser>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  orders_some?: Maybe<OrderWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MembershipWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  genere?: Maybe<String>;
  genere_not?: Maybe<String>;
  genere_in?: Maybe<String[] | String>;
  genere_not_in?: Maybe<String[] | String>;
  genere_lt?: Maybe<String>;
  genere_lte?: Maybe<String>;
  genere_gt?: Maybe<String>;
  genere_gte?: Maybe<String>;
  genere_contains?: Maybe<String>;
  genere_not_contains?: Maybe<String>;
  genere_starts_with?: Maybe<String>;
  genere_not_starts_with?: Maybe<String>;
  genere_ends_with?: Maybe<String>;
  genere_not_ends_with?: Maybe<String>;
  points?: Maybe<Int>;
  points_not?: Maybe<Int>;
  points_in?: Maybe<Int[] | Int>;
  points_not_in?: Maybe<Int[] | Int>;
  points_lt?: Maybe<Int>;
  points_lte?: Maybe<Int>;
  points_gt?: Maybe<Int>;
  points_gte?: Maybe<Int>;
  type?: Maybe<TypeMembership>;
  type_not?: Maybe<TypeMembership>;
  type_in?: Maybe<TypeMembership[] | TypeMembership>;
  type_not_in?: Maybe<TypeMembership[] | TypeMembership>;
  AND?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
}

export interface TicketWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  seat?: Maybe<SeatWhereInput>;
  show?: Maybe<ShowWhereInput>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  points?: Maybe<Int>;
  points_not?: Maybe<Int>;
  points_in?: Maybe<Int[] | Int>;
  points_not_in?: Maybe<Int[] | Int>;
  points_lt?: Maybe<Int>;
  points_lte?: Maybe<Int>;
  points_gt?: Maybe<Int>;
  points_gte?: Maybe<Int>;
  AND?: Maybe<TicketWhereInput[] | TicketWhereInput>;
}

export interface EmployeeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  rol?: Maybe<TypeRol>;
  rol_not?: Maybe<TypeRol>;
  rol_in?: Maybe<TypeRol[] | TypeRol>;
  rol_not_in?: Maybe<TypeRol[] | TypeRol>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<EmployeeWhereInput[] | EmployeeWhereInput>;
}

export type EmployeeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MembershipWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MovieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SeatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ShowWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TicketWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  rfc?: Maybe<String>;
  token?: Maybe<String>;
}>;

export interface BillboardCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  startAt: DateTimeInput;
  endAt: DateTimeInput;
  shows?: Maybe<ShowCreateManyInput>;
}

export interface ShowCreateManyInput {
  create?: Maybe<ShowCreateInput[] | ShowCreateInput>;
  connect?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
}

export interface ShowCreateInput {
  id?: Maybe<ID_Input>;
  movie: MovieCreateOneInput;
  schedule: String;
  room: RoomCreateOneInput;
}

export interface MovieCreateOneInput {
  create?: Maybe<MovieCreateInput>;
  connect?: Maybe<MovieWhereUniqueInput>;
}

export interface MovieCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  sinopsis: String;
  genere: String;
  clasification: String;
  lenght: Int;
  lenguage: String;
  premiere: DateTimeInput;
}

export interface RoomCreateOneInput {
  create?: Maybe<RoomCreateInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomCreateInput {
  id?: Maybe<ID_Input>;
  available?: Maybe<Boolean>;
  type: TypeRoom;
  seats?: Maybe<SeatCreateManyInput>;
  number: Int;
}

export interface SeatCreateManyInput {
  create?: Maybe<SeatCreateInput[] | SeatCreateInput>;
  connect?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
}

export interface SeatCreateInput {
  id?: Maybe<ID_Input>;
  column: Int;
  line: Int;
  status: TypeSeatStatus;
  type: String;
}

export interface BillboardUpdateInput {
  title?: Maybe<String>;
  startAt?: Maybe<DateTimeInput>;
  endAt?: Maybe<DateTimeInput>;
  shows?: Maybe<ShowUpdateManyInput>;
}

export interface ShowUpdateManyInput {
  create?: Maybe<ShowCreateInput[] | ShowCreateInput>;
  update?: Maybe<
    | ShowUpdateWithWhereUniqueNestedInput[]
    | ShowUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ShowUpsertWithWhereUniqueNestedInput[]
    | ShowUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
  connect?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
  set?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
  disconnect?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
  deleteMany?: Maybe<ShowScalarWhereInput[] | ShowScalarWhereInput>;
  updateMany?: Maybe<
    ShowUpdateManyWithWhereNestedInput[] | ShowUpdateManyWithWhereNestedInput
  >;
}

export interface ShowUpdateWithWhereUniqueNestedInput {
  where: ShowWhereUniqueInput;
  data: ShowUpdateDataInput;
}

export interface ShowUpdateDataInput {
  movie?: Maybe<MovieUpdateOneRequiredInput>;
  schedule?: Maybe<String>;
  room?: Maybe<RoomUpdateOneRequiredInput>;
}

export interface MovieUpdateOneRequiredInput {
  create?: Maybe<MovieCreateInput>;
  update?: Maybe<MovieUpdateDataInput>;
  upsert?: Maybe<MovieUpsertNestedInput>;
  connect?: Maybe<MovieWhereUniqueInput>;
}

export interface MovieUpdateDataInput {
  title?: Maybe<String>;
  sinopsis?: Maybe<String>;
  genere?: Maybe<String>;
  clasification?: Maybe<String>;
  lenght?: Maybe<Int>;
  lenguage?: Maybe<String>;
  premiere?: Maybe<DateTimeInput>;
}

export interface MovieUpsertNestedInput {
  update: MovieUpdateDataInput;
  create: MovieCreateInput;
}

export interface RoomUpdateOneRequiredInput {
  create?: Maybe<RoomCreateInput>;
  update?: Maybe<RoomUpdateDataInput>;
  upsert?: Maybe<RoomUpsertNestedInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomUpdateDataInput {
  available?: Maybe<Boolean>;
  type?: Maybe<TypeRoom>;
  seats?: Maybe<SeatUpdateManyInput>;
  number?: Maybe<Int>;
}

export interface SeatUpdateManyInput {
  create?: Maybe<SeatCreateInput[] | SeatCreateInput>;
  update?: Maybe<
    | SeatUpdateWithWhereUniqueNestedInput[]
    | SeatUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SeatUpsertWithWhereUniqueNestedInput[]
    | SeatUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
  connect?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
  set?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
  disconnect?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
  deleteMany?: Maybe<SeatScalarWhereInput[] | SeatScalarWhereInput>;
  updateMany?: Maybe<
    SeatUpdateManyWithWhereNestedInput[] | SeatUpdateManyWithWhereNestedInput
  >;
}

export interface SeatUpdateWithWhereUniqueNestedInput {
  where: SeatWhereUniqueInput;
  data: SeatUpdateDataInput;
}

export interface SeatUpdateDataInput {
  column?: Maybe<Int>;
  line?: Maybe<Int>;
  status?: Maybe<TypeSeatStatus>;
  type?: Maybe<String>;
}

export interface SeatUpsertWithWhereUniqueNestedInput {
  where: SeatWhereUniqueInput;
  update: SeatUpdateDataInput;
  create: SeatCreateInput;
}

export interface SeatScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  column?: Maybe<Int>;
  column_not?: Maybe<Int>;
  column_in?: Maybe<Int[] | Int>;
  column_not_in?: Maybe<Int[] | Int>;
  column_lt?: Maybe<Int>;
  column_lte?: Maybe<Int>;
  column_gt?: Maybe<Int>;
  column_gte?: Maybe<Int>;
  line?: Maybe<Int>;
  line_not?: Maybe<Int>;
  line_in?: Maybe<Int[] | Int>;
  line_not_in?: Maybe<Int[] | Int>;
  line_lt?: Maybe<Int>;
  line_lte?: Maybe<Int>;
  line_gt?: Maybe<Int>;
  line_gte?: Maybe<Int>;
  status?: Maybe<TypeSeatStatus>;
  status_not?: Maybe<TypeSeatStatus>;
  status_in?: Maybe<TypeSeatStatus[] | TypeSeatStatus>;
  status_not_in?: Maybe<TypeSeatStatus[] | TypeSeatStatus>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<SeatScalarWhereInput[] | SeatScalarWhereInput>;
  OR?: Maybe<SeatScalarWhereInput[] | SeatScalarWhereInput>;
  NOT?: Maybe<SeatScalarWhereInput[] | SeatScalarWhereInput>;
}

export interface SeatUpdateManyWithWhereNestedInput {
  where: SeatScalarWhereInput;
  data: SeatUpdateManyDataInput;
}

export interface SeatUpdateManyDataInput {
  column?: Maybe<Int>;
  line?: Maybe<Int>;
  status?: Maybe<TypeSeatStatus>;
  type?: Maybe<String>;
}

export interface RoomUpsertNestedInput {
  update: RoomUpdateDataInput;
  create: RoomCreateInput;
}

export interface ShowUpsertWithWhereUniqueNestedInput {
  where: ShowWhereUniqueInput;
  update: ShowUpdateDataInput;
  create: ShowCreateInput;
}

export interface ShowScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  schedule?: Maybe<String>;
  schedule_not?: Maybe<String>;
  schedule_in?: Maybe<String[] | String>;
  schedule_not_in?: Maybe<String[] | String>;
  schedule_lt?: Maybe<String>;
  schedule_lte?: Maybe<String>;
  schedule_gt?: Maybe<String>;
  schedule_gte?: Maybe<String>;
  schedule_contains?: Maybe<String>;
  schedule_not_contains?: Maybe<String>;
  schedule_starts_with?: Maybe<String>;
  schedule_not_starts_with?: Maybe<String>;
  schedule_ends_with?: Maybe<String>;
  schedule_not_ends_with?: Maybe<String>;
  AND?: Maybe<ShowScalarWhereInput[] | ShowScalarWhereInput>;
  OR?: Maybe<ShowScalarWhereInput[] | ShowScalarWhereInput>;
  NOT?: Maybe<ShowScalarWhereInput[] | ShowScalarWhereInput>;
}

export interface ShowUpdateManyWithWhereNestedInput {
  where: ShowScalarWhereInput;
  data: ShowUpdateManyDataInput;
}

export interface ShowUpdateManyDataInput {
  schedule?: Maybe<String>;
}

export interface BillboardUpdateManyMutationInput {
  title?: Maybe<String>;
  startAt?: Maybe<DateTimeInput>;
  endAt?: Maybe<DateTimeInput>;
}

export interface ComboCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  items?: Maybe<ItemCreateManyInput>;
}

export interface ItemCreateManyInput {
  create?: Maybe<ItemCreateInput[] | ItemCreateInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  sku: String;
  cost: Int;
  amount: Int;
  name: String;
  description: String;
  valuePoints?: Maybe<Int>;
}

export interface ComboUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  items?: Maybe<ItemUpdateManyInput>;
}

export interface ItemUpdateManyInput {
  create?: Maybe<ItemCreateInput[] | ItemCreateInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueNestedInput[]
    | ItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueNestedInput[]
    | ItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateDataInput;
}

export interface ItemUpdateDataInput {
  sku?: Maybe<String>;
  cost?: Maybe<Int>;
  amount?: Maybe<Int>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  valuePoints?: Maybe<Int>;
}

export interface ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface ItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  sku?: Maybe<String>;
  sku_not?: Maybe<String>;
  sku_in?: Maybe<String[] | String>;
  sku_not_in?: Maybe<String[] | String>;
  sku_lt?: Maybe<String>;
  sku_lte?: Maybe<String>;
  sku_gt?: Maybe<String>;
  sku_gte?: Maybe<String>;
  sku_contains?: Maybe<String>;
  sku_not_contains?: Maybe<String>;
  sku_starts_with?: Maybe<String>;
  sku_not_starts_with?: Maybe<String>;
  sku_ends_with?: Maybe<String>;
  sku_not_ends_with?: Maybe<String>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  valuePoints?: Maybe<Int>;
  valuePoints_not?: Maybe<Int>;
  valuePoints_in?: Maybe<Int[] | Int>;
  valuePoints_not_in?: Maybe<Int[] | Int>;
  valuePoints_lt?: Maybe<Int>;
  valuePoints_lte?: Maybe<Int>;
  valuePoints_gt?: Maybe<Int>;
  valuePoints_gte?: Maybe<Int>;
  AND?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  OR?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  NOT?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface ItemUpdateManyDataInput {
  sku?: Maybe<String>;
  cost?: Maybe<Int>;
  amount?: Maybe<Int>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  valuePoints?: Maybe<Int>;
}

export interface ComboUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface CustomerCreateInput {
  id?: Maybe<ID_Input>;
  alias: String;
  user?: Maybe<UserCreateOneInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone?: Maybe<Int>;
  password?: Maybe<String>;
  rfc?: Maybe<String>;
  name: String;
  lastName?: Maybe<String>;
  points?: Maybe<Int>;
  membership?: Maybe<MembershipCreateOneInput>;
  type?: Maybe<TypeUser>;
  token?: Maybe<String>;
  orders?: Maybe<OrderCreateManyWithoutUserInput>;
}

export interface MembershipCreateOneInput {
  create?: Maybe<MembershipCreateInput>;
  connect?: Maybe<MembershipWhereUniqueInput>;
}

export interface MembershipCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  genere: String;
  points: Int;
  type: TypeMembership;
}

export interface OrderCreateManyWithoutUserInput {
  create?: Maybe<OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  customer: CustomerCreateOneInput;
  price: Int;
  items?: Maybe<ItemCreateManyInput>;
  tickets?: Maybe<TicketCreateManyInput>;
  discount: Int;
  employee: EmployeeCreateOneInput;
  PaymentMethod: TypePayment;
}

export interface CustomerCreateOneInput {
  create?: Maybe<CustomerCreateInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface TicketCreateManyInput {
  create?: Maybe<TicketCreateInput[] | TicketCreateInput>;
  connect?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
}

export interface TicketCreateInput {
  id?: Maybe<ID_Input>;
  seat: SeatCreateOneInput;
  show: ShowCreateOneInput;
  cost: Int;
  points: Int;
}

export interface SeatCreateOneInput {
  create?: Maybe<SeatCreateInput>;
  connect?: Maybe<SeatWhereUniqueInput>;
}

export interface ShowCreateOneInput {
  create?: Maybe<ShowCreateInput>;
  connect?: Maybe<ShowWhereUniqueInput>;
}

export interface EmployeeCreateOneInput {
  create?: Maybe<EmployeeCreateInput>;
  connect?: Maybe<EmployeeWhereUniqueInput>;
}

export interface EmployeeCreateInput {
  id?: Maybe<ID_Input>;
  rol: TypeRol;
  user: UserCreateOneInput;
}

export interface CustomerUpdateInput {
  alias?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  password?: Maybe<String>;
  rfc?: Maybe<String>;
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  points?: Maybe<Int>;
  membership?: Maybe<MembershipUpdateOneInput>;
  type?: Maybe<TypeUser>;
  token?: Maybe<String>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
}

export interface MembershipUpdateOneInput {
  create?: Maybe<MembershipCreateInput>;
  update?: Maybe<MembershipUpdateDataInput>;
  upsert?: Maybe<MembershipUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MembershipWhereUniqueInput>;
}

export interface MembershipUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  genere?: Maybe<String>;
  points?: Maybe<Int>;
  type?: Maybe<TypeMembership>;
}

export interface MembershipUpsertNestedInput {
  update: MembershipUpdateDataInput;
  create: MembershipCreateInput;
}

export interface OrderUpdateManyWithoutUserInput {
  create?: Maybe<OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput>;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutUserInput[]
    | OrderUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutUserInput[]
    | OrderUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutUserDataInput;
}

export interface OrderUpdateWithoutUserDataInput {
  customer?: Maybe<CustomerUpdateOneRequiredInput>;
  price?: Maybe<Int>;
  items?: Maybe<ItemUpdateManyInput>;
  tickets?: Maybe<TicketUpdateManyInput>;
  discount?: Maybe<Int>;
  employee?: Maybe<EmployeeUpdateOneRequiredInput>;
  PaymentMethod?: Maybe<TypePayment>;
}

export interface CustomerUpdateOneRequiredInput {
  create?: Maybe<CustomerCreateInput>;
  update?: Maybe<CustomerUpdateDataInput>;
  upsert?: Maybe<CustomerUpsertNestedInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerUpdateDataInput {
  alias?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
}

export interface CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput;
  create: CustomerCreateInput;
}

export interface TicketUpdateManyInput {
  create?: Maybe<TicketCreateInput[] | TicketCreateInput>;
  update?: Maybe<
    | TicketUpdateWithWhereUniqueNestedInput[]
    | TicketUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TicketUpsertWithWhereUniqueNestedInput[]
    | TicketUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
  connect?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
  set?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
  disconnect?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
  deleteMany?: Maybe<TicketScalarWhereInput[] | TicketScalarWhereInput>;
  updateMany?: Maybe<
    | TicketUpdateManyWithWhereNestedInput[]
    | TicketUpdateManyWithWhereNestedInput
  >;
}

export interface TicketUpdateWithWhereUniqueNestedInput {
  where: TicketWhereUniqueInput;
  data: TicketUpdateDataInput;
}

export interface TicketUpdateDataInput {
  seat?: Maybe<SeatUpdateOneRequiredInput>;
  show?: Maybe<ShowUpdateOneRequiredInput>;
  cost?: Maybe<Int>;
  points?: Maybe<Int>;
}

export interface SeatUpdateOneRequiredInput {
  create?: Maybe<SeatCreateInput>;
  update?: Maybe<SeatUpdateDataInput>;
  upsert?: Maybe<SeatUpsertNestedInput>;
  connect?: Maybe<SeatWhereUniqueInput>;
}

export interface SeatUpsertNestedInput {
  update: SeatUpdateDataInput;
  create: SeatCreateInput;
}

export interface ShowUpdateOneRequiredInput {
  create?: Maybe<ShowCreateInput>;
  update?: Maybe<ShowUpdateDataInput>;
  upsert?: Maybe<ShowUpsertNestedInput>;
  connect?: Maybe<ShowWhereUniqueInput>;
}

export interface ShowUpsertNestedInput {
  update: ShowUpdateDataInput;
  create: ShowCreateInput;
}

export interface TicketUpsertWithWhereUniqueNestedInput {
  where: TicketWhereUniqueInput;
  update: TicketUpdateDataInput;
  create: TicketCreateInput;
}

export interface TicketScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  points?: Maybe<Int>;
  points_not?: Maybe<Int>;
  points_in?: Maybe<Int[] | Int>;
  points_not_in?: Maybe<Int[] | Int>;
  points_lt?: Maybe<Int>;
  points_lte?: Maybe<Int>;
  points_gt?: Maybe<Int>;
  points_gte?: Maybe<Int>;
  AND?: Maybe<TicketScalarWhereInput[] | TicketScalarWhereInput>;
  OR?: Maybe<TicketScalarWhereInput[] | TicketScalarWhereInput>;
  NOT?: Maybe<TicketScalarWhereInput[] | TicketScalarWhereInput>;
}

export interface TicketUpdateManyWithWhereNestedInput {
  where: TicketScalarWhereInput;
  data: TicketUpdateManyDataInput;
}

export interface TicketUpdateManyDataInput {
  cost?: Maybe<Int>;
  points?: Maybe<Int>;
}

export interface EmployeeUpdateOneRequiredInput {
  create?: Maybe<EmployeeCreateInput>;
  update?: Maybe<EmployeeUpdateDataInput>;
  upsert?: Maybe<EmployeeUpsertNestedInput>;
  connect?: Maybe<EmployeeWhereUniqueInput>;
}

export interface EmployeeUpdateDataInput {
  rol?: Maybe<TypeRol>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface EmployeeUpsertNestedInput {
  update: EmployeeUpdateDataInput;
  create: EmployeeCreateInput;
}

export interface OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutUserDataInput;
  create: OrderCreateWithoutUserInput;
}

export interface OrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  discount?: Maybe<Int>;
  discount_not?: Maybe<Int>;
  discount_in?: Maybe<Int[] | Int>;
  discount_not_in?: Maybe<Int[] | Int>;
  discount_lt?: Maybe<Int>;
  discount_lte?: Maybe<Int>;
  discount_gt?: Maybe<Int>;
  discount_gte?: Maybe<Int>;
  PaymentMethod?: Maybe<TypePayment>;
  PaymentMethod_not?: Maybe<TypePayment>;
  PaymentMethod_in?: Maybe<TypePayment[] | TypePayment>;
  PaymentMethod_not_in?: Maybe<TypePayment[] | TypePayment>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderUpdateManyDataInput {
  price?: Maybe<Int>;
  discount?: Maybe<Int>;
  PaymentMethod?: Maybe<TypePayment>;
}

export interface CustomerUpdateManyMutationInput {
  alias?: Maybe<String>;
}

export interface EmployeeUpdateInput {
  rol?: Maybe<TypeRol>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface EmployeeUpdateManyMutationInput {
  rol?: Maybe<TypeRol>;
}

export interface ItemUpdateInput {
  sku?: Maybe<String>;
  cost?: Maybe<Int>;
  amount?: Maybe<Int>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  valuePoints?: Maybe<Int>;
}

export interface ItemUpdateManyMutationInput {
  sku?: Maybe<String>;
  cost?: Maybe<Int>;
  amount?: Maybe<Int>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  valuePoints?: Maybe<Int>;
}

export interface MembershipUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  genere?: Maybe<String>;
  points?: Maybe<Int>;
  type?: Maybe<TypeMembership>;
}

export interface MembershipUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  genere?: Maybe<String>;
  points?: Maybe<Int>;
  type?: Maybe<TypeMembership>;
}

export interface MovieUpdateInput {
  title?: Maybe<String>;
  sinopsis?: Maybe<String>;
  genere?: Maybe<String>;
  clasification?: Maybe<String>;
  lenght?: Maybe<Int>;
  lenguage?: Maybe<String>;
  premiere?: Maybe<DateTimeInput>;
}

export interface MovieUpdateManyMutationInput {
  title?: Maybe<String>;
  sinopsis?: Maybe<String>;
  genere?: Maybe<String>;
  clasification?: Maybe<String>;
  lenght?: Maybe<Int>;
  lenguage?: Maybe<String>;
  premiere?: Maybe<DateTimeInput>;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  customer: CustomerCreateOneInput;
  price: Int;
  items?: Maybe<ItemCreateManyInput>;
  tickets?: Maybe<TicketCreateManyInput>;
  discount: Int;
  employee: EmployeeCreateOneInput;
  PaymentMethod: TypePayment;
  user: UserCreateOneWithoutOrdersInput;
}

export interface UserCreateOneWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrdersInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone?: Maybe<Int>;
  password?: Maybe<String>;
  rfc?: Maybe<String>;
  name: String;
  lastName?: Maybe<String>;
  points?: Maybe<Int>;
  membership?: Maybe<MembershipCreateOneInput>;
  type?: Maybe<TypeUser>;
  token?: Maybe<String>;
}

export interface OrderUpdateInput {
  customer?: Maybe<CustomerUpdateOneRequiredInput>;
  price?: Maybe<Int>;
  items?: Maybe<ItemUpdateManyInput>;
  tickets?: Maybe<TicketUpdateManyInput>;
  discount?: Maybe<Int>;
  employee?: Maybe<EmployeeUpdateOneRequiredInput>;
  PaymentMethod?: Maybe<TypePayment>;
  user?: Maybe<UserUpdateOneRequiredWithoutOrdersInput>;
}

export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  update?: Maybe<UserUpdateWithoutOrdersDataInput>;
  upsert?: Maybe<UserUpsertWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOrdersDataInput {
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  password?: Maybe<String>;
  rfc?: Maybe<String>;
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  points?: Maybe<Int>;
  membership?: Maybe<MembershipUpdateOneInput>;
  type?: Maybe<TypeUser>;
  token?: Maybe<String>;
}

export interface UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput;
  create: UserCreateWithoutOrdersInput;
}

export interface OrderUpdateManyMutationInput {
  price?: Maybe<Int>;
  discount?: Maybe<Int>;
  PaymentMethod?: Maybe<TypePayment>;
}

export interface RoomUpdateInput {
  available?: Maybe<Boolean>;
  type?: Maybe<TypeRoom>;
  seats?: Maybe<SeatUpdateManyInput>;
  number?: Maybe<Int>;
}

export interface RoomUpdateManyMutationInput {
  available?: Maybe<Boolean>;
  type?: Maybe<TypeRoom>;
  number?: Maybe<Int>;
}

export interface SeatUpdateInput {
  column?: Maybe<Int>;
  line?: Maybe<Int>;
  status?: Maybe<TypeSeatStatus>;
  type?: Maybe<String>;
}

export interface SeatUpdateManyMutationInput {
  column?: Maybe<Int>;
  line?: Maybe<Int>;
  status?: Maybe<TypeSeatStatus>;
  type?: Maybe<String>;
}

export interface ShowUpdateInput {
  movie?: Maybe<MovieUpdateOneRequiredInput>;
  schedule?: Maybe<String>;
  room?: Maybe<RoomUpdateOneRequiredInput>;
}

export interface ShowUpdateManyMutationInput {
  schedule?: Maybe<String>;
}

export interface TicketUpdateInput {
  seat?: Maybe<SeatUpdateOneRequiredInput>;
  show?: Maybe<ShowUpdateOneRequiredInput>;
  cost?: Maybe<Int>;
  points?: Maybe<Int>;
}

export interface TicketUpdateManyMutationInput {
  cost?: Maybe<Int>;
  points?: Maybe<Int>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  password?: Maybe<String>;
  rfc?: Maybe<String>;
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  points?: Maybe<Int>;
  membership?: Maybe<MembershipUpdateOneInput>;
  type?: Maybe<TypeUser>;
  token?: Maybe<String>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  password?: Maybe<String>;
  rfc?: Maybe<String>;
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  points?: Maybe<Int>;
  type?: Maybe<TypeUser>;
  token?: Maybe<String>;
}

export interface BillboardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BillboardWhereInput>;
  AND?: Maybe<
    BillboardSubscriptionWhereInput[] | BillboardSubscriptionWhereInput
  >;
}

export interface ComboSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ComboWhereInput>;
  AND?: Maybe<ComboSubscriptionWhereInput[] | ComboSubscriptionWhereInput>;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface EmployeeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmployeeWhereInput>;
  AND?: Maybe<
    EmployeeSubscriptionWhereInput[] | EmployeeSubscriptionWhereInput
  >;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface MembershipSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MembershipWhereInput>;
  AND?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
}

export interface MovieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MovieWhereInput>;
  AND?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface SeatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SeatWhereInput>;
  AND?: Maybe<SeatSubscriptionWhereInput[] | SeatSubscriptionWhereInput>;
}

export interface ShowSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShowWhereInput>;
  AND?: Maybe<ShowSubscriptionWhereInput[] | ShowSubscriptionWhereInput>;
}

export interface TicketSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TicketWhereInput>;
  AND?: Maybe<TicketSubscriptionWhereInput[] | TicketSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Billboard {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  startAt: DateTimeOutput;
  endAt: DateTimeOutput;
}

export interface BillboardPromise extends Promise<Billboard>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  startAt: () => Promise<DateTimeOutput>;
  endAt: () => Promise<DateTimeOutput>;
  shows: <T = FragmentableArray<Show>>(args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BillboardSubscription
  extends Promise<AsyncIterator<Billboard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  startAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  shows: <T = Promise<AsyncIterator<ShowSubscription>>>(args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BillboardNullablePromise
  extends Promise<Billboard | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  startAt: () => Promise<DateTimeOutput>;
  endAt: () => Promise<DateTimeOutput>;
  shows: <T = FragmentableArray<Show>>(args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Show {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  schedule: String;
}

export interface ShowPromise extends Promise<Show>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  movie: <T = MoviePromise>() => T;
  schedule: () => Promise<String>;
  room: <T = RoomPromise>() => T;
}

export interface ShowSubscription
  extends Promise<AsyncIterator<Show>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  movie: <T = MovieSubscription>() => T;
  schedule: () => Promise<AsyncIterator<String>>;
  room: <T = RoomSubscription>() => T;
}

export interface ShowNullablePromise
  extends Promise<Show | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  movie: <T = MoviePromise>() => T;
  schedule: () => Promise<String>;
  room: <T = RoomPromise>() => T;
}

export interface Movie {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  sinopsis: String;
  genere: String;
  clasification: String;
  lenght: Int;
  lenguage: String;
  premiere: DateTimeOutput;
}

export interface MoviePromise extends Promise<Movie>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  sinopsis: () => Promise<String>;
  genere: () => Promise<String>;
  clasification: () => Promise<String>;
  lenght: () => Promise<Int>;
  lenguage: () => Promise<String>;
  premiere: () => Promise<DateTimeOutput>;
}

export interface MovieSubscription
  extends Promise<AsyncIterator<Movie>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  sinopsis: () => Promise<AsyncIterator<String>>;
  genere: () => Promise<AsyncIterator<String>>;
  clasification: () => Promise<AsyncIterator<String>>;
  lenght: () => Promise<AsyncIterator<Int>>;
  lenguage: () => Promise<AsyncIterator<String>>;
  premiere: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MovieNullablePromise
  extends Promise<Movie | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  sinopsis: () => Promise<String>;
  genere: () => Promise<String>;
  clasification: () => Promise<String>;
  lenght: () => Promise<Int>;
  lenguage: () => Promise<String>;
  premiere: () => Promise<DateTimeOutput>;
}

export interface Room {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  available: Boolean;
  type: TypeRoom;
  number: Int;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  available: () => Promise<Boolean>;
  type: () => Promise<TypeRoom>;
  seats: <T = FragmentableArray<Seat>>(args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  number: () => Promise<Int>;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<TypeRoom>>;
  seats: <T = Promise<AsyncIterator<SeatSubscription>>>(args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  number: () => Promise<AsyncIterator<Int>>;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  available: () => Promise<Boolean>;
  type: () => Promise<TypeRoom>;
  seats: <T = FragmentableArray<Seat>>(args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  number: () => Promise<Int>;
}

export interface Seat {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  column: Int;
  line: Int;
  status: TypeSeatStatus;
  type: String;
}

export interface SeatPromise extends Promise<Seat>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  column: () => Promise<Int>;
  line: () => Promise<Int>;
  status: () => Promise<TypeSeatStatus>;
  type: () => Promise<String>;
}

export interface SeatSubscription
  extends Promise<AsyncIterator<Seat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  column: () => Promise<AsyncIterator<Int>>;
  line: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<TypeSeatStatus>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface SeatNullablePromise
  extends Promise<Seat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  column: () => Promise<Int>;
  line: () => Promise<Int>;
  status: () => Promise<TypeSeatStatus>;
  type: () => Promise<String>;
}

export interface BillboardConnection {
  pageInfo: PageInfo;
  edges: BillboardEdge[];
}

export interface BillboardConnectionPromise
  extends Promise<BillboardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BillboardEdge>>() => T;
  aggregate: <T = AggregateBillboardPromise>() => T;
}

export interface BillboardConnectionSubscription
  extends Promise<AsyncIterator<BillboardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BillboardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBillboardSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BillboardEdge {
  node: Billboard;
  cursor: String;
}

export interface BillboardEdgePromise
  extends Promise<BillboardEdge>,
    Fragmentable {
  node: <T = BillboardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BillboardEdgeSubscription
  extends Promise<AsyncIterator<BillboardEdge>>,
    Fragmentable {
  node: <T = BillboardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBillboard {
  count: Int;
}

export interface AggregateBillboardPromise
  extends Promise<AggregateBillboard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBillboardSubscription
  extends Promise<AsyncIterator<AggregateBillboard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Combo {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
}

export interface ComboPromise extends Promise<Combo>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ComboSubscription
  extends Promise<AsyncIterator<Combo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ComboNullablePromise
  extends Promise<Combo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Item {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  sku: String;
  cost: Int;
  amount: Int;
  name: String;
  description: String;
  valuePoints?: Int;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sku: () => Promise<String>;
  cost: () => Promise<Int>;
  amount: () => Promise<Int>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  valuePoints: () => Promise<Int>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sku: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  valuePoints: () => Promise<AsyncIterator<Int>>;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sku: () => Promise<String>;
  cost: () => Promise<Int>;
  amount: () => Promise<Int>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  valuePoints: () => Promise<Int>;
}

export interface ComboConnection {
  pageInfo: PageInfo;
  edges: ComboEdge[];
}

export interface ComboConnectionPromise
  extends Promise<ComboConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ComboEdge>>() => T;
  aggregate: <T = AggregateComboPromise>() => T;
}

export interface ComboConnectionSubscription
  extends Promise<AsyncIterator<ComboConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ComboEdgeSubscription>>>() => T;
  aggregate: <T = AggregateComboSubscription>() => T;
}

export interface ComboEdge {
  node: Combo;
  cursor: String;
}

export interface ComboEdgePromise extends Promise<ComboEdge>, Fragmentable {
  node: <T = ComboPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ComboEdgeSubscription
  extends Promise<AsyncIterator<ComboEdge>>,
    Fragmentable {
  node: <T = ComboSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCombo {
  count: Int;
}

export interface AggregateComboPromise
  extends Promise<AggregateCombo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateComboSubscription
  extends Promise<AsyncIterator<AggregateCombo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Customer {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  alias: String;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  alias: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  alias: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  alias: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  phone?: Int;
  password?: String;
  rfc?: String;
  name: String;
  lastName?: String;
  points?: Int;
  type?: TypeUser;
  token?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  password: () => Promise<String>;
  rfc: () => Promise<String>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  points: () => Promise<Int>;
  membership: <T = MembershipPromise>() => T;
  type: () => Promise<TypeUser>;
  token: () => Promise<String>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  password: () => Promise<AsyncIterator<String>>;
  rfc: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  points: () => Promise<AsyncIterator<Int>>;
  membership: <T = MembershipSubscription>() => T;
  type: () => Promise<AsyncIterator<TypeUser>>;
  token: () => Promise<AsyncIterator<String>>;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  password: () => Promise<String>;
  rfc: () => Promise<String>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  points: () => Promise<Int>;
  membership: <T = MembershipPromise>() => T;
  type: () => Promise<TypeUser>;
  token: () => Promise<String>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Membership {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description: String;
  genere: String;
  points: Int;
  type: TypeMembership;
}

export interface MembershipPromise extends Promise<Membership>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  genere: () => Promise<String>;
  points: () => Promise<Int>;
  type: () => Promise<TypeMembership>;
}

export interface MembershipSubscription
  extends Promise<AsyncIterator<Membership>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  genere: () => Promise<AsyncIterator<String>>;
  points: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<TypeMembership>>;
}

export interface MembershipNullablePromise
  extends Promise<Membership | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  genere: () => Promise<String>;
  points: () => Promise<Int>;
  type: () => Promise<TypeMembership>;
}

export interface Order {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  price: Int;
  discount: Int;
  PaymentMethod: TypePayment;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  customer: <T = CustomerPromise>() => T;
  price: () => Promise<Int>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tickets: <T = FragmentableArray<Ticket>>(args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  discount: () => Promise<Int>;
  employee: <T = EmployeePromise>() => T;
  PaymentMethod: () => Promise<TypePayment>;
  user: <T = UserPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  customer: <T = CustomerSubscription>() => T;
  price: () => Promise<AsyncIterator<Int>>;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tickets: <T = Promise<AsyncIterator<TicketSubscription>>>(args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  discount: () => Promise<AsyncIterator<Int>>;
  employee: <T = EmployeeSubscription>() => T;
  PaymentMethod: () => Promise<AsyncIterator<TypePayment>>;
  user: <T = UserSubscription>() => T;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  customer: <T = CustomerPromise>() => T;
  price: () => Promise<Int>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tickets: <T = FragmentableArray<Ticket>>(args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  discount: () => Promise<Int>;
  employee: <T = EmployeePromise>() => T;
  PaymentMethod: () => Promise<TypePayment>;
  user: <T = UserPromise>() => T;
}

export interface Ticket {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  cost: Int;
  points: Int;
}

export interface TicketPromise extends Promise<Ticket>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  seat: <T = SeatPromise>() => T;
  show: <T = ShowPromise>() => T;
  cost: () => Promise<Int>;
  points: () => Promise<Int>;
}

export interface TicketSubscription
  extends Promise<AsyncIterator<Ticket>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  seat: <T = SeatSubscription>() => T;
  show: <T = ShowSubscription>() => T;
  cost: () => Promise<AsyncIterator<Int>>;
  points: () => Promise<AsyncIterator<Int>>;
}

export interface TicketNullablePromise
  extends Promise<Ticket | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  seat: <T = SeatPromise>() => T;
  show: <T = ShowPromise>() => T;
  cost: () => Promise<Int>;
  points: () => Promise<Int>;
}

export interface Employee {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  rol: TypeRol;
}

export interface EmployeePromise extends Promise<Employee>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  rol: () => Promise<TypeRol>;
  user: <T = UserPromise>() => T;
}

export interface EmployeeSubscription
  extends Promise<AsyncIterator<Employee>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  rol: () => Promise<AsyncIterator<TypeRol>>;
  user: <T = UserSubscription>() => T;
}

export interface EmployeeNullablePromise
  extends Promise<Employee | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  rol: () => Promise<TypeRol>;
  user: <T = UserPromise>() => T;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmployeeConnection {
  pageInfo: PageInfo;
  edges: EmployeeEdge[];
}

export interface EmployeeConnectionPromise
  extends Promise<EmployeeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmployeeEdge>>() => T;
  aggregate: <T = AggregateEmployeePromise>() => T;
}

export interface EmployeeConnectionSubscription
  extends Promise<AsyncIterator<EmployeeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmployeeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmployeeSubscription>() => T;
}

export interface EmployeeEdge {
  node: Employee;
  cursor: String;
}

export interface EmployeeEdgePromise
  extends Promise<EmployeeEdge>,
    Fragmentable {
  node: <T = EmployeePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmployeeEdgeSubscription
  extends Promise<AsyncIterator<EmployeeEdge>>,
    Fragmentable {
  node: <T = EmployeeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmployee {
  count: Int;
}

export interface AggregateEmployeePromise
  extends Promise<AggregateEmployee>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmployeeSubscription
  extends Promise<AsyncIterator<AggregateEmployee>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MembershipConnection {
  pageInfo: PageInfo;
  edges: MembershipEdge[];
}

export interface MembershipConnectionPromise
  extends Promise<MembershipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MembershipEdge>>() => T;
  aggregate: <T = AggregateMembershipPromise>() => T;
}

export interface MembershipConnectionSubscription
  extends Promise<AsyncIterator<MembershipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MembershipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMembershipSubscription>() => T;
}

export interface MembershipEdge {
  node: Membership;
  cursor: String;
}

export interface MembershipEdgePromise
  extends Promise<MembershipEdge>,
    Fragmentable {
  node: <T = MembershipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MembershipEdgeSubscription
  extends Promise<AsyncIterator<MembershipEdge>>,
    Fragmentable {
  node: <T = MembershipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMembership {
  count: Int;
}

export interface AggregateMembershipPromise
  extends Promise<AggregateMembership>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMembershipSubscription
  extends Promise<AsyncIterator<AggregateMembership>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MovieConnection {
  pageInfo: PageInfo;
  edges: MovieEdge[];
}

export interface MovieConnectionPromise
  extends Promise<MovieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MovieEdge>>() => T;
  aggregate: <T = AggregateMoviePromise>() => T;
}

export interface MovieConnectionSubscription
  extends Promise<AsyncIterator<MovieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MovieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMovieSubscription>() => T;
}

export interface MovieEdge {
  node: Movie;
  cursor: String;
}

export interface MovieEdgePromise extends Promise<MovieEdge>, Fragmentable {
  node: <T = MoviePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MovieEdgeSubscription
  extends Promise<AsyncIterator<MovieEdge>>,
    Fragmentable {
  node: <T = MovieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMovie {
  count: Int;
}

export interface AggregateMoviePromise
  extends Promise<AggregateMovie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovieSubscription
  extends Promise<AsyncIterator<AggregateMovie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SeatConnection {
  pageInfo: PageInfo;
  edges: SeatEdge[];
}

export interface SeatConnectionPromise
  extends Promise<SeatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeatEdge>>() => T;
  aggregate: <T = AggregateSeatPromise>() => T;
}

export interface SeatConnectionSubscription
  extends Promise<AsyncIterator<SeatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeatSubscription>() => T;
}

export interface SeatEdge {
  node: Seat;
  cursor: String;
}

export interface SeatEdgePromise extends Promise<SeatEdge>, Fragmentable {
  node: <T = SeatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeatEdgeSubscription
  extends Promise<AsyncIterator<SeatEdge>>,
    Fragmentable {
  node: <T = SeatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSeat {
  count: Int;
}

export interface AggregateSeatPromise
  extends Promise<AggregateSeat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeatSubscription
  extends Promise<AsyncIterator<AggregateSeat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShowConnection {
  pageInfo: PageInfo;
  edges: ShowEdge[];
}

export interface ShowConnectionPromise
  extends Promise<ShowConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShowEdge>>() => T;
  aggregate: <T = AggregateShowPromise>() => T;
}

export interface ShowConnectionSubscription
  extends Promise<AsyncIterator<ShowConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShowSubscription>() => T;
}

export interface ShowEdge {
  node: Show;
  cursor: String;
}

export interface ShowEdgePromise extends Promise<ShowEdge>, Fragmentable {
  node: <T = ShowPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShowEdgeSubscription
  extends Promise<AsyncIterator<ShowEdge>>,
    Fragmentable {
  node: <T = ShowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShow {
  count: Int;
}

export interface AggregateShowPromise
  extends Promise<AggregateShow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShowSubscription
  extends Promise<AsyncIterator<AggregateShow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TicketConnection {
  pageInfo: PageInfo;
  edges: TicketEdge[];
}

export interface TicketConnectionPromise
  extends Promise<TicketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TicketEdge>>() => T;
  aggregate: <T = AggregateTicketPromise>() => T;
}

export interface TicketConnectionSubscription
  extends Promise<AsyncIterator<TicketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TicketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTicketSubscription>() => T;
}

export interface TicketEdge {
  node: Ticket;
  cursor: String;
}

export interface TicketEdgePromise extends Promise<TicketEdge>, Fragmentable {
  node: <T = TicketPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TicketEdgeSubscription
  extends Promise<AsyncIterator<TicketEdge>>,
    Fragmentable {
  node: <T = TicketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTicket {
  count: Int;
}

export interface AggregateTicketPromise
  extends Promise<AggregateTicket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTicketSubscription
  extends Promise<AsyncIterator<AggregateTicket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BillboardSubscriptionPayload {
  mutation: MutationType;
  node: Billboard;
  updatedFields: String[];
  previousValues: BillboardPreviousValues;
}

export interface BillboardSubscriptionPayloadPromise
  extends Promise<BillboardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BillboardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BillboardPreviousValuesPromise>() => T;
}

export interface BillboardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BillboardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BillboardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BillboardPreviousValuesSubscription>() => T;
}

export interface BillboardPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  startAt: DateTimeOutput;
  endAt: DateTimeOutput;
}

export interface BillboardPreviousValuesPromise
  extends Promise<BillboardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  startAt: () => Promise<DateTimeOutput>;
  endAt: () => Promise<DateTimeOutput>;
}

export interface BillboardPreviousValuesSubscription
  extends Promise<AsyncIterator<BillboardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  startAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ComboSubscriptionPayload {
  mutation: MutationType;
  node: Combo;
  updatedFields: String[];
  previousValues: ComboPreviousValues;
}

export interface ComboSubscriptionPayloadPromise
  extends Promise<ComboSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ComboPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ComboPreviousValuesPromise>() => T;
}

export interface ComboSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ComboSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ComboSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ComboPreviousValuesSubscription>() => T;
}

export interface ComboPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
}

export interface ComboPreviousValuesPromise
  extends Promise<ComboPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ComboPreviousValuesSubscription
  extends Promise<AsyncIterator<ComboPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  alias: String;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  alias: () => Promise<String>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  alias: () => Promise<AsyncIterator<String>>;
}

export interface EmployeeSubscriptionPayload {
  mutation: MutationType;
  node: Employee;
  updatedFields: String[];
  previousValues: EmployeePreviousValues;
}

export interface EmployeeSubscriptionPayloadPromise
  extends Promise<EmployeeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmployeePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmployeePreviousValuesPromise>() => T;
}

export interface EmployeeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmployeeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmployeeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmployeePreviousValuesSubscription>() => T;
}

export interface EmployeePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  rol: TypeRol;
}

export interface EmployeePreviousValuesPromise
  extends Promise<EmployeePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  rol: () => Promise<TypeRol>;
}

export interface EmployeePreviousValuesSubscription
  extends Promise<AsyncIterator<EmployeePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  rol: () => Promise<AsyncIterator<TypeRol>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  sku: String;
  cost: Int;
  amount: Int;
  name: String;
  description: String;
  valuePoints?: Int;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sku: () => Promise<String>;
  cost: () => Promise<Int>;
  amount: () => Promise<Int>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  valuePoints: () => Promise<Int>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sku: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  valuePoints: () => Promise<AsyncIterator<Int>>;
}

export interface MembershipSubscriptionPayload {
  mutation: MutationType;
  node: Membership;
  updatedFields: String[];
  previousValues: MembershipPreviousValues;
}

export interface MembershipSubscriptionPayloadPromise
  extends Promise<MembershipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MembershipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MembershipPreviousValuesPromise>() => T;
}

export interface MembershipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MembershipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MembershipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MembershipPreviousValuesSubscription>() => T;
}

export interface MembershipPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description: String;
  genere: String;
  points: Int;
  type: TypeMembership;
}

export interface MembershipPreviousValuesPromise
  extends Promise<MembershipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  genere: () => Promise<String>;
  points: () => Promise<Int>;
  type: () => Promise<TypeMembership>;
}

export interface MembershipPreviousValuesSubscription
  extends Promise<AsyncIterator<MembershipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  genere: () => Promise<AsyncIterator<String>>;
  points: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<TypeMembership>>;
}

export interface MovieSubscriptionPayload {
  mutation: MutationType;
  node: Movie;
  updatedFields: String[];
  previousValues: MoviePreviousValues;
}

export interface MovieSubscriptionPayloadPromise
  extends Promise<MovieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MoviePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoviePreviousValuesPromise>() => T;
}

export interface MovieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoviePreviousValuesSubscription>() => T;
}

export interface MoviePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  sinopsis: String;
  genere: String;
  clasification: String;
  lenght: Int;
  lenguage: String;
  premiere: DateTimeOutput;
}

export interface MoviePreviousValuesPromise
  extends Promise<MoviePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  sinopsis: () => Promise<String>;
  genere: () => Promise<String>;
  clasification: () => Promise<String>;
  lenght: () => Promise<Int>;
  lenguage: () => Promise<String>;
  premiere: () => Promise<DateTimeOutput>;
}

export interface MoviePreviousValuesSubscription
  extends Promise<AsyncIterator<MoviePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  sinopsis: () => Promise<AsyncIterator<String>>;
  genere: () => Promise<AsyncIterator<String>>;
  clasification: () => Promise<AsyncIterator<String>>;
  lenght: () => Promise<AsyncIterator<Int>>;
  lenguage: () => Promise<AsyncIterator<String>>;
  premiere: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  price: Int;
  discount: Int;
  PaymentMethod: TypePayment;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  price: () => Promise<Int>;
  discount: () => Promise<Int>;
  PaymentMethod: () => Promise<TypePayment>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  price: () => Promise<AsyncIterator<Int>>;
  discount: () => Promise<AsyncIterator<Int>>;
  PaymentMethod: () => Promise<AsyncIterator<TypePayment>>;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface RoomPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  available: Boolean;
  type: TypeRoom;
  number: Int;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  available: () => Promise<Boolean>;
  type: () => Promise<TypeRoom>;
  number: () => Promise<Int>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<TypeRoom>>;
  number: () => Promise<AsyncIterator<Int>>;
}

export interface SeatSubscriptionPayload {
  mutation: MutationType;
  node: Seat;
  updatedFields: String[];
  previousValues: SeatPreviousValues;
}

export interface SeatSubscriptionPayloadPromise
  extends Promise<SeatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeatPreviousValuesPromise>() => T;
}

export interface SeatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeatPreviousValuesSubscription>() => T;
}

export interface SeatPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  column: Int;
  line: Int;
  status: TypeSeatStatus;
  type: String;
}

export interface SeatPreviousValuesPromise
  extends Promise<SeatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  column: () => Promise<Int>;
  line: () => Promise<Int>;
  status: () => Promise<TypeSeatStatus>;
  type: () => Promise<String>;
}

export interface SeatPreviousValuesSubscription
  extends Promise<AsyncIterator<SeatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  column: () => Promise<AsyncIterator<Int>>;
  line: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<TypeSeatStatus>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface ShowSubscriptionPayload {
  mutation: MutationType;
  node: Show;
  updatedFields: String[];
  previousValues: ShowPreviousValues;
}

export interface ShowSubscriptionPayloadPromise
  extends Promise<ShowSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShowPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShowPreviousValuesPromise>() => T;
}

export interface ShowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShowSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShowPreviousValuesSubscription>() => T;
}

export interface ShowPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  schedule: String;
}

export interface ShowPreviousValuesPromise
  extends Promise<ShowPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  schedule: () => Promise<String>;
}

export interface ShowPreviousValuesSubscription
  extends Promise<AsyncIterator<ShowPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  schedule: () => Promise<AsyncIterator<String>>;
}

export interface TicketSubscriptionPayload {
  mutation: MutationType;
  node: Ticket;
  updatedFields: String[];
  previousValues: TicketPreviousValues;
}

export interface TicketSubscriptionPayloadPromise
  extends Promise<TicketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TicketPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TicketPreviousValuesPromise>() => T;
}

export interface TicketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TicketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TicketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TicketPreviousValuesSubscription>() => T;
}

export interface TicketPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  cost: Int;
  points: Int;
}

export interface TicketPreviousValuesPromise
  extends Promise<TicketPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  cost: () => Promise<Int>;
  points: () => Promise<Int>;
}

export interface TicketPreviousValuesSubscription
  extends Promise<AsyncIterator<TicketPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cost: () => Promise<AsyncIterator<Int>>;
  points: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  phone?: Int;
  password?: String;
  rfc?: String;
  name: String;
  lastName?: String;
  points?: Int;
  type?: TypeUser;
  token?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  password: () => Promise<String>;
  rfc: () => Promise<String>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  points: () => Promise<Int>;
  type: () => Promise<TypeUser>;
  token: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  password: () => Promise<AsyncIterator<String>>;
  rfc: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  points: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<TypeUser>>;
  token: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Combo",
    embedded: false
  },
  {
    name: "Billboard",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Employee",
    embedded: false
  },
  {
    name: "TypeRol",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Membership",
    embedded: false
  },
  {
    name: "TypeMembership",
    embedded: false
  },
  {
    name: "Movie",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "TypePayment",
    embedded: false
  },
  {
    name: "TypeStatus",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  },
  {
    name: "TypeRoom",
    embedded: false
  },
  {
    name: "Seat",
    embedded: false
  },
  {
    name: "TypeSeatStatus",
    embedded: false
  },
  {
    name: "Show",
    embedded: false
  },
  {
    name: "Ticket",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "TypeUser",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["URL_BASE"]}/default/${process.env["ENVIROMENT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
